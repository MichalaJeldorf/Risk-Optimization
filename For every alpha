import numpy as np
from gurobipy import *
from scipy.stats import truncnorm
import pandas as pd
import gurobipy as gp
from gurobipy import GRB
import matplotlib.pyplot as plt
import os
import time

n_facilities = 10  # |I|
n_customers = 500  # |J|
n_outcomes = 1000  # |K|

#M, F and C are from config1
m = 12.5
f = 750
M = m*n_customers
F = f*n_customers
D = 270

np.random.seed(1)

combined_file_name = "decision_variables_for_every_alpha.xlsx"

# Define alpha values to test
alpha_values = np.arange(0.4, 1.0, 0.01)  # From 0.7 to 0.99 in steps of 0.01

mu = {(j): np.random.uniform(10,50) for j in range(n_customers)}
sigma = {(j): np.random.uniform(0.05*mu[j],0.35*mu[j]) for j in range(n_customers)}

cust_largest = sorted(mu, key = mu.get, reverse = True)[:3]

cust_a = {(j): np.random.uniform(0, 100) for j in range(n_customers)}
cust_b = {(j): np.random.uniform(0, 100) for j in range(n_customers)}

customer_coord = {(j): (cust_a[j], cust_b[j]) for j in range(n_customers)}

cust_largest_a = [cust_a[i] for i in cust_largest]
cust_largest_b = [cust_b[i] for i in cust_largest]

fac_a_largest = {(i): np.random.uniform(cust_largest_a[i]- 5, cust_largest_a[i]+ 5) for i in range(3)}
fac_b_largest = {(i): np.random.uniform(cust_largest_b[i]- 5, cust_largest_b[i]+ 5) for i in range(3)}

fac_a_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}
fac_b_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}

fac_a = fac_a_largest| fac_a_rest
fac_b = fac_b_largest| fac_b_rest

def euc_dist(i, j):
    return np.sqrt((fac_a[i] - cust_a[j])**2 + (fac_b[i] - cust_b[j])**2)

dist = {(i,j): euc_dist(i,j) for i in range(n_facilities) for j in range(n_customers)}

C = {(i,j): D* dist[i,j] for i in range(n_facilities) for j in range(n_customers)}

def generate_demand(mu, sigma, size=n_outcomes):
    demand_outcome = {}
    for j in mu.keys():
        lower_bound = 0
        upper_bound = 1000
        a = (lower_bound - mu[j]) / sigma[j]
        b = (upper_bound - mu[j]) / sigma[j]
        demand_outcome[j] = truncnorm.rvs(a, b, loc = mu[j], scale = sigma[j], size = size)
    return demand_outcome

demand_outcomes = generate_demand(mu, sigma, size = n_outcomes)

xi = {(j,k): demand_outcomes[j][k] for j in range(n_customers) for k in range(n_outcomes)}

#B = 1e4 #arbitrarily large constant

def compute_f(i, x, xi, k):
    return sum(xi[j, k] * C[i, j] * x for j in range(n_customers))

def compute_h(i, xi, k):
    return M  # M is already scaled by n_customers

B = {}
for i in range(n_facilities):
    for k in range(n_outcomes):
        max_f_minus_h = float('-inf')
        for x_val in [0, 1]:  # Binary x
            f_val = compute_f(i, x_val, xi, k)
            h_val = compute_h(i, xi, k)
            max_f_minus_h = max(max_f_minus_h, f_val - h_val)
        B[(i, k)] = max_f_minus_h

pi = {(k): 1/n_outcomes for k in range(n_outcomes)}

# Lists to store results
num_open_facilities = []  # Stores the number of open facilities for each alpha
num_connections = []  # Stores the number of connections for each alpha
# Initialize lists to store connection data for plotting
connection_data = []
obj_values = []  # Stores the objective function values for each alpha

x_results_all = []
y_results_all = []

with pd.ExcelWriter(combined_file_name, engine='openpyxl') as writer:
    for alpha in alpha_values:
        # Initialize the model as before
        model = gp.Model("FacilityProblem")

        x = model.addVars(n_facilities, vtype=GRB.BINARY, name="x")
        y = model.addVars(n_facilities, n_customers, vtype=GRB.BINARY, name="y")
        gamma = model.addVars(n_facilities, n_outcomes, vtype=GRB.BINARY, name="gamma")

        model.setObjective(
            quicksum(x[i] * F for i in range(n_facilities)) +
            quicksum(C[i, j] * y[i, j] for i in range(n_facilities) for j in range(n_customers)),
            GRB.MINIMIZE
        )

        # Constraints
        model.addConstrs((y[i, j] <= x[i] for i in range(n_facilities) for j in range(n_customers)), "c1")
        model.addConstrs((quicksum(y[i, j] for i in range(n_facilities)) == 1 for j in range(n_customers)), "c2")
        model.addConstrs((quicksum(xi[j, k] * y[i, j] for j in range(n_customers)) <= M * x[i] + B[(i, k)] * (1 - gamma[i, k])
                          for k in range(n_outcomes) for i in range(n_facilities)), "c3")
        model.addConstrs((quicksum(pi[k] * gamma[i, k] for k in range(n_outcomes)) >= alpha for i in range(n_facilities)),
                         "c4")

        model.optimize()

        if model.status == GRB.OPTIMAL:
            print(f"Alpha = {alpha:.2f}, Optimal solution found.")
            obj_values.append(model.objVal)  # Save the objective function value
            print(f"Alpha = {alpha:.2f}, Objective Value = {model.objVal}")

            # Collect `x` values
            x_results_all.extend([{'alpha': alpha, 'i': i, 'x[i]': x[i].X} for i in range(n_facilities)])

            # Collect `y` values
            y_results_all.extend([
                {'alpha': alpha, 'i': i, 'j': j, 'y[i,j]': y[i, j].X}
                for i in range(n_facilities) for j in range(n_customers)
            ])

            # Extract the locations of open connections (y[i, j] = 1)
            for i in range(n_facilities):
                for j in range(n_customers):
                    if y[i, j].X > 0.5:  # If connection is open
                        connection_data.append({
                            "alpha": alpha,
                            "facility_x": fac_a[i],
                            "facility_y": fac_b[i],
                            "customer_x": cust_a[j],
                            "customer_y": cust_b[j]
                        })
        else:
            print(f"Model not solved for alpha = {alpha:.2f}.")
            obj_values.append(None)  # Append None if no solution is found
            print(f"Model not solved for alpha = {alpha:.2f}.")

        open_facilities = [i for i in range(n_facilities) if x[i].X > 0.5]
        print(f"Alpha = {alpha:.2f}, Open Facilities: {open_facilities}")

        # Collect x[i] values along with alpha
        x_results = [{'i': i, 'x[i]': x[i].X, 'alpha': alpha} for i in range(n_facilities)]

        # Collect y[i, j] values
        y_results = [
            {'alpha': alpha, 'i': i, 'j': j, 'y[i,j]': y[i, j].X}
            for i in range(n_facilities) for j in range(n_customers)
        ]

    # Convert to DataFrames
    df_x_all = pd.DataFrame(x_results_all)
    df_y_all = pd.DataFrame(y_results_all)

    # Pivot tables to create matrix format
    x_pivot = df_x_all.pivot(index='i', columns='alpha', values='x[i]')
    y_pivot = df_y_all.pivot_table(index=['i', 'j'], columns='alpha', values='y[i,j]')

    # Save to sheets
    x_pivot.to_excel(writer, sheet_name='x_values', index=True)
    y_pivot.to_excel(writer, sheet_name='y_values', index=True)

    df_object = pd.DataFrame(obj_values)
    df_object.to_excel(writer, sheet_name='objectvalue', index=False)

    loc_facility_results = [{'i': i, 'loc_fac_a': fac_a[i], 'loc_fac_b': fac_b[i]} for i in range(n_facilities)]
    loc_demand_results = [{'j': j, 'loc_demand_a': cust_a[j], 'loc_demand_b': cust_b[j], 'mu': mu[j]} for j in range(n_customers)]

    df_loc_facility = pd.DataFrame(loc_facility_results)
    df_loc_facility.to_excel(writer, sheet_name='loc_facility', index=False)

    df_loc_demand = pd.DataFrame(loc_demand_results)
    df_loc_demand.to_excel(writer, sheet_name='loc_demand', index=False)

print(f"Combined file saved: {combined_file_name}")
# Convert connection data to a DataFrame
df_connections = pd.DataFrame(connection_data)

# Plotting the connections
plt.figure(figsize=(10, 8))
scatter = plt.scatter(
    df_connections["facility_x"],
    df_connections["facility_y"],
    c=df_connections["alpha"],
    cmap="viridis",
    s=50,  # Size of the dots
    label="Open Connections"
)
plt.colorbar(scatter, label="Alpha (Confidence Level)")
plt.xlabel("Facility X Coordinate")
plt.ylabel("Facility Y Coordinate")
plt.title(f"Location of Open Connections by Alpha for I={n_facilities}, J={n_customers}")
plt.grid(True)
plt.show()

# Plot the objective values
plt.figure(figsize=(10, 5))
plt.plot(alpha_values, obj_values, marker='o', label="Total cost")
plt.xlabel("Alpha (Confidence Level)")
plt.ylabel("Total cost")
plt.title(f"Total cost per alpha for I={n_facilities}, J={n_customers}, K={n_outcomes}, M={m}, F={f}, D={D}")
plt.grid(True)
plt.legend()
plt.show()

print("File saved in:", os.getcwd())
