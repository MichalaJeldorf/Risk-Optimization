from gurobipy import *
import numpy as np
from scipy.stats import truncnorm

np.random.seed(42)

m = Model("example_model")

I = 3
J = 6

epsilon = 1e-6

x = {}
F = {}
M = {}
alpha = {}
y = {}
C = {}

for i in range(I):
    x[i] = m.addVar(vtype=GRB.BINARY, name="x_" + str(i)) # x for all i
    F[i] = m.addVar(lb=0.0, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS, name="F_" + str(i))  # F for all i
    M[i] = m.addVar(lb=epsilon, ub=GRB.INFINITY, vtype=GRB.CONTINUOUS, name="M_" + str(i))  # M for all i
    alpha[i] = m.addVar(lb=0.93, ub=0.97, vtype=GRB.CONTINUOUS, name="alpha_" + str(i))  # alpha for all i

for i in range(I):
    for j in range(J):
        y[i, j] = m.addVar(vtype=GRB.BINARY, name=f"y_{i}_{j}")  # y for all (i, j)
        C[i, j] = m.addVar(vtype=GRB.BINARY, name=f"C_{i}_{j}")  # C for all (i, j)

Fx = quicksum(F[i] * x[i] for i in range(I))
Cy = quicksum(C[i, j] * y[i, j] for i in range(I) for j in range(J))

m.update()
objective_function = Fx + Cy
m.setObjective(objective_function, GRB.MINIMIZE)

### constraint 1 (for every i,j)
for i in range(I):
    for j in range(J):
        m.addConstr(y[i, j] <= x[i], name=f"c1_{i}_{j}")
m.update()
### constraint 2 (for every j)
for j in range(J):
    sumy_per_j = quicksum(y[i, j] for i in range(I))
    m.addConstr(sumy_per_j == 1, name=f"c2_{j}")

### contraint 3
# generate psi (not sure I generate psi correcly)
mu = {}
ratio = {}
sigma = {}
a = {}
b = {}
psi = {}

alpha = 0.09
lower = (1-alpha)/2
upper = 1-lower

for j in range(J):
    mu[j] = np.random.uniform(10, 50, J)
    ratio[j] = np.random.uniform(0.05, 0.35, J)
    sigma[j] = mu[j] * ratio[j]
    a[j] = (lower - mu[j]) / sigma[j] #a,b standardized truncation points
    b[j] = (upper - mu[j]) / sigma[j]
    psi[j] = truncnorm.rvs(a, b, loc=mu, scale=sigma)

# make sure xi are placed correctly !!
# make the chance constraint

m.update() #adding the stuff to the model

m.write("model.lp") #printing the model in a readable way. File arrives at /Users/michalajeldorf/Desktop/RiskOptimization

m.optimize() #solving the model

#Giovanni writes this
#print('Objective value: %g' % m.objVal) #objective value
#print('%s %g' % (x.varName, x.x)) #solution x
#print('%s %g' % (y.varName, y.x)) #solution y
