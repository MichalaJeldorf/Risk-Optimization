from gurobipy import *
import numpy as np
from scipy.stats import truncnorm
import heapq

np.random.seed(42)

m = Model("example_model")

I = 5
J = 8

M = [12.5, 17.5, 15, 15, 15, 15, 15, 15, 15, 15]
M = [i * J for i in M]
F = [500, 500, 250, 500, 750, 1000, 500, 500, 500, 500]
F = [i * J for i in F]
D = [270, 270, 270, 270, 270, 270, 240, 300, 330, 210]

epsilon = 1e-6

x = {}
alpha = {}
y = {}
C = {}

for i in range(I):
    x[i] = m.addVar(vtype=GRB.BINARY, name="x_" + str(i)) # x for all i
    alpha[i] = m.addVar(lb=0.93, ub=0.97, vtype=GRB.CONTINUOUS, name="alpha_" + str(i))  # alpha for all i

for i in range(I):
    for j in range(J):
        y[i, j] = m.addVar(vtype=GRB.BINARY, name=f"y_{i}_{j}")  # y for all (i, j)

loc_demand = [(int(np.random.uniform(0, 100)), int(np.random.uniform(0, 100))) for _ in range(J)]

### constraint 1 (for every i,j)
for i in range(I):
    for j in range(J):
        m.addConstr(y[i, j] <= x[i], name=f"c1_{i}_{j}")
m.update()
### constraint 2 (for every j)
for j in range(J):
    sumy_per_j = quicksum(y[i, j] for i in range(I))
    m.addConstr(sumy_per_j == 1, name=f"c2_{j}")

### contraint 3
# generate psi (not sure I generate psi correcly)
mu = {}
ratio = {}
sigma = {}
a = {}
b = {}
psi = {}

alpha = 0.09
lower = (1-alpha)/2
upper = 1-lower


for j in range(J):
    mu[j] = np.random.uniform(10, 50)
    ratio[j] = np.random.uniform(0.05, 0.35)
    sigma[j] = mu[j] * ratio[j]
    #a[j] = (lower - mu[j]) / sigma[j] #a,b standardized truncation points
    #b[j] = (upper - mu[j]) / sigma[j]
    #psi[j] = truncnorm.rvs(a, b, loc=mu, scale=sigma)

largest_keys = heapq.nlargest(3, mu, key=mu.get)

largest_3_loc_demand = [loc_demand[i] for i in largest_keys]

loc_x_high_mu = []
for h in range(len(largest_3_loc_demand)):
    high_first_coordinate = largest_3_loc_demand[h][0] + 5
    low_first_coordinate = largest_3_loc_demand[h][0] - 5
    high_second_coordinate = largest_3_loc_demand[h][1] + 5
    low_second_coordinate = largest_3_loc_demand[h][1] - 5
    loc_x_high_mu += [(int(np.random.uniform(low_first_coordinate, high_first_coordinate)),
                      int(np.random.uniform(low_second_coordinate, high_second_coordinate)))]

loc_x_resterende = []
for h in range(I-3):
    loc_x_resterende += [(int(np.random.uniform(20, 80)),
                         int(np.random.uniform(20, 80)))]

loc_facility = loc_x_high_mu + loc_x_resterende

norm = []
for i in range(I):
    for j in range(J):
        dist = np.sqrt((loc_demand[j][1] - loc_demand[j][0])**2 + (loc_facility[i][1]-loc_facility[i][0])**2)
        norm.append(int(dist))
C = [i*D[0] for i in norm]

Fx = quicksum(F[0] * x[i] for i in range(I))

Cy = quicksum(C[i * J + j] * y[i, j] for i in range(I) for j in range(J))
m.update()
objective_function = Fx + Cy
m.setObjective(objective_function, GRB.MINIMIZE)

# make the chance constraint

m.update() #adding the stuff to the model

m.optimize() #solving the model

print('Objective value: %g' % m.objVal) #objective value

for i in x:
    print(x[i].getAttr('VarName'), " = " , x[i].getAttr('x'))

for (i, j) in y:
    print(y[i, j].getAttr('VarName'), " = " , y[i, j].getAttr('x'))

m.write("model.lp") #printing the model in a readable way. File arrives at /Users/michalajeldorf/Desktop/RiskOptimization
