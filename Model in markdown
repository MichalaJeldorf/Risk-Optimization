import numpy as np
import gurobipy as gp
from gurobipy import GRB
from scipy.stats import truncnorm
import pandas as pd

#%%
## Parameters

n_customers = 40 # |J|
n_facilities = 10 # |I|
n_outcomes = 1000 # |K|
np.random.seed(1)
#%%
combined_file_name = "decision_variables_md.xlsx"
#%%
## Parameters, randomly simulated: Demand distribution

mu = {(j): np.random.uniform(10,50) for j in range(n_customers)}
sigma = {(j): np.random.uniform(0.05*mu[j],0.35*mu[j]) for j in range(n_customers)}

cust_largest = sorted(mu, key = mu.get, reverse = True)[:3]
print(mu)
print(cust_largest)
#%%
## Parameters, randomly simulated: Customer coordinates

cust_a = {(j): np.random.uniform(0, 100) for j in range(n_customers)}
cust_b = {(j): np.random.uniform(0, 100) for j in range(n_customers)}

customer_coord = {(j): (cust_a[j], cust_b[j]) for j in range(n_customers)}

cust_largest_a = [cust_a[i] for i in cust_largest]
cust_largest_b = [cust_b[i] for i in cust_largest]
print(cust_a)
print(cust_largest_a)
print(cust_b)
print(cust_largest_b)
#%%
## Parameters, randomly simulated: Facility coordinates

fac_a_largest = {(i): np.random.uniform(cust_largest_a[i]- 5, cust_largest_a[i]+ 5) for i in range(3)}
fac_b_largest = {(i): np.random.uniform(cust_largest_b[i]- 5, cust_largest_b[i]+ 5) for i in range(3)}

fac_a_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}
fac_b_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}

fac_a = fac_a_largest| fac_a_rest
fac_b = fac_b_largest| fac_b_rest

print(fac_a_largest)
#%%
## Parameters, distances between simulated points

def euc_dist(i, j):
    return np.sqrt((fac_a[i] - cust_a[j])**2 + (fac_b[i] - cust_b[j])**2)

dist = {(i,j): euc_dist(i,j) for i in range(n_facilities) for j in range(n_customers)}
#%%
## Parameters, directly configuration dependent

config_params = {
    1 : {"Mm" : 12.5, "O" : 500,  "D" : 270},
    2 : {"Mm" : 17.5, "O" : 500,  "D" : 270},
    3 : {"Mm" : 15,   "O" : 250,  "D" : 270},
    4 : {"Mm" : 15,   "O" : 500,  "D" : 270},
    5 : {"Mm" : 15,   "O" : 750,  "D" : 270},
    6 : {"Mm" : 15,   "O" : 1000, "D" : 270},
    7 : {"Mm" : 15,   "O" : 500,  "D" : 240},
    8 : {"Mm" : 15,   "O" : 500,  "D" : 300},
    9 : {"Mm" : 15,   "O" : 500,  "D" : 330},
    10 : {"Mm" : 15,  "O" : 500,  "D" : 210}
}

#%%
# ## Extraction of parameter values for configurations 

# config_id = 1  # Choose configuration
# current_config_params = config_params[config_id]
# print(f"Configuration {config_id} parameters:", current_config_params)

# Mm = current_config_params["Mm"]
# O = current_config_params["O"]
# D = current_config_params["D"]
#%%
## Parameters, indirectly configuration dependent
#D=10
# Mm, O, D should be extracted first
#F = O * n_customers 
#M = Mm * n_customers 
#F=10
#M=150

alpha = 0.92

#C = {(i,j): D* dist[i,j] for i in range(n_facilities) for j in range(n_customers)}
#%%
## Demand outcome simulation

def generate_demand(mu, sigma, size=n_outcomes, lower_bound=0, upper_bound=np.inf):
    demand_outcome = {}
    for j in mu.keys():
        a = (lower_bound - mu[j]) / sigma[j]
        b = (upper_bound - mu[j]) / sigma[j]
        demand_outcome[j] = truncnorm.rvs(a, b, loc = mu[j], scale = sigma[j], size = size)
    return demand_outcome

demand_outcomes = generate_demand(mu, sigma, size = n_outcomes)

print(demand_outcomes)
#%%
## Chance constraint parameters

xi = {(j,k): demand_outcomes[j][k] for j in range(n_customers) for k in range(n_outcomes)} 

B = 1000000 #arbitrarily large constant

pi = {(k): 1/n_outcomes for k in range(n_outcomes)}

print(xi)
#%%
#import gurobipy as gp;
from gurobipy import *
#from gurobipy import GRB;

# Initialize dictionaries to store results
x_results_dict = {config_id: [] for config_id in config_params.keys()}
y_results_dict = {config_id: [] for config_id in config_params.keys()}

obj_values=[]
with pd.ExcelWriter(combined_file_name, engine='openpyxl') as writer:
    for config_id, params in config_params.items():
        print(f"Solving for Configuration {config_id}...")
        current_config_params = config_params[config_id]
        Mm = current_config_params["Mm"]
        O = current_config_params["O"]
        D = current_config_params["D"]
        F = O * n_customers
        M = Mm * n_customers
        C = {(i,j): D* dist[i,j] for i in range(n_facilities) for j in range(n_customers)}

        model = gp.Model("FacilityProblem")

        x = model.addVars(n_facilities, vtype=GRB.BINARY , name ="x")
        y = model.addVars(n_facilities, n_customers , vtype=GRB.BINARY ,name ="y")
        gamma = model.addVars(n_facilities, n_outcomes, vtype=GRB.BINARY , name="gamma")

        model.setObjective(quicksum(x[i] * F for i in range(n_facilities)) + quicksum(C[i,j] * y[i,j]
                                                                   for i in range(n_facilities)
                                                                   for j in range(n_customers)) , GRB.MINIMIZE)

        model.addConstrs((y[i,j] <= x[i] for i in range(n_facilities) for j in range(n_customers)), "c1")

        model.addConstrs((quicksum(y[i,j] for i in range(n_facilities)) == 1 for j in range(n_customers)), "c2")

        model.addConstrs((quicksum(xi[j,k]*y[i,j] for j in range(n_customers)) <= M * x[i] + B*(1-gamma[i,k])  for k in range(n_outcomes) for i in range(n_facilities) ), "c3")

        model.addConstrs( (quicksum(pi[k]*gamma[i,k] for k in range(n_outcomes)) >= alpha for i in range(n_facilities) )  ,"c4")

        model.optimize()

        if model.status == GRB.OPTIMAL:
            print("Optimal solution:")
            for v in model.getVars():
                print(f"{v.varName}: {v.x}")
            print(f"Objective value: {model.objVal}")
            obj_values.append(model.objVal)
        else:
            print("No optimal solution found.")

        # Collect x[i] values for the current configuration and add to the dictionary
        for i in range(n_facilities):
            x_results_dict[config_id].append(x[i].X)

        # Collect y[i,j] values for the current configuration and add to the dictionary
        for i in range(n_facilities):
            for j in range(n_customers):
                y_results_dict[config_id].append(y[i, j].X)

    # Convert the collected x values into a DataFrame where each column represents a config_id
    df_x = pd.DataFrame(x_results_dict)
    df_x['i'] = range(n_facilities)  # Add the 'i' column for x[i] values
    df_x = df_x[['i'] + [col for col in df_x.columns if col != 'i']]  # Reorder to put 'i' first

    # Convert the collected y values into a DataFrame where each column represents a config_id
    y_rows = []
    for i in range(n_facilities):
        for j in range(n_customers):
            row = {'i': i, 'j': j}
            for config_id in config_params.keys():
                row[config_id] = y_results_dict[config_id].pop(0)  # Pop values for each config_id
            y_rows.append(row)

    df_y = pd.DataFrame(y_rows)

    # Write the DataFrames to separate sheets
    df_x.to_excel(writer, sheet_name="x_values", index=False)
    df_y.to_excel(writer, sheet_name="y_values", index=False)

    print("Sheets for x and y values have been added.")

    df_object = pd.DataFrame(obj_values)
    df_object.to_excel(writer, sheet_name='objectvalue', index=False)

print(f"Combined file saved: {combined_file_name}")
