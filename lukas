from gurobipy import *
from scipy.stats import truncnorm
import numpy as np
import gurobipy as gp
import pandas as pd

n_customers = 20 # |J|
n_facilities = 50 # |I|
n_outcomes = 100 # |K|
alpha = 0.90
np.random.seed(1)

combined_file_name = "decision_variables_lukas.xlsx"

mu = {(j): np.random.uniform(10,50) for j in range(n_customers)}
sigma = {(j): np.random.uniform(0.05*mu[j],0.35*mu[j]) for j in range(n_customers)}

cust_largest = sorted(mu, key = mu.get, reverse = True)[:3]

cust_a = {(j): np.random.uniform(0, 100) for j in range(n_customers)}
cust_b = {(j): np.random.uniform(0, 100) for j in range(n_customers)}

customer_coord = {(j): (cust_a[j], cust_b[j]) for j in range(n_customers)}

cust_largest_a = [cust_a[i] for i in cust_largest]
cust_largest_b = [cust_b[i] for i in cust_largest]

fac_a_largest = {(i): np.random.uniform(cust_largest_a[i]- 5, cust_largest_a[i]+ 5) for i in range(3)}
fac_b_largest = {(i): np.random.uniform(cust_largest_b[i]- 5, cust_largest_b[i]+ 5) for i in range(3)}

fac_a_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}
fac_b_rest = {(i): np.random.uniform(20, 80) for i in range(3, n_facilities)}

fac_a = fac_a_largest| fac_a_rest
fac_b = fac_b_largest| fac_b_rest

def euc_dist(i, j):
    return np.sqrt((fac_a[i] - cust_a[j])**2 + (fac_b[i] - cust_b[j])**2)

dist = {(i,j): euc_dist(i,j) for i in range(n_facilities) for j in range(n_customers)}

config_params = {
    1 : {"Mm" : 12.5, "O" : 500,  "D" : 270},
    2 : {"Mm" : 17.5, "O" : 500,  "D" : 270},
    3 : {"Mm" : 15,   "O" : 250,  "D" : 270},
    4 : {"Mm" : 15,   "O" : 500,  "D" : 270},
    5 : {"Mm" : 15,   "O" : 750,  "D" : 270},
    6 : {"Mm" : 15,   "O" : 1000, "D" : 270},
    7 : {"Mm" : 15,   "O" : 500,  "D" : 240},
    8 : {"Mm" : 15,   "O" : 500,  "D" : 300},
    9 : {"Mm" : 15,   "O" : 500,  "D" : 330},
    10 : {"Mm" : 15,  "O" : 500,  "D" : 210}
}
def generate_demand(mu, sigma, size=n_outcomes, lower_bound=0, upper_bound=np.inf):
    demand_outcome = {}
    for j in mu.keys():
        a = (lower_bound - mu[j]) / sigma[j]
        b = (upper_bound - mu[j]) / sigma[j]
        demand_outcome[j] = truncnorm.rvs(a, b, loc = mu[j], scale = sigma[j], size = size)
    return demand_outcome

demand_outcomes = generate_demand(mu, sigma, size = n_outcomes)

print(demand_outcomes)
xi = {(j,k): demand_outcomes[j][k] for j in range(n_customers) for k in range(n_outcomes)}

B = 1000000 #arbitrarily large constant

pi = {(k): 1/n_outcomes for k in range(n_outcomes)}

print(xi)
obj_values = []
with pd.ExcelWriter(combined_file_name, engine='openpyxl') as writer:
    for config_id, params in config_params.items():
        print(f"Solving for Configuration {config_id}...")
        current_config_params = config_params[config_id]
        Mm = current_config_params["Mm"]
        O = current_config_params["O"]
        D = current_config_params["D"]
        F = O * n_customers
        M = Mm * n_customers
        C = {(i,j): D* dist[i,j] for i in range(n_facilities) for j in range(n_customers)}

        model = gp.Model("FacilityProblem")

        x = model.addVars(n_facilities, vtype=GRB.BINARY , name ="x")
        y = model.addVars(n_facilities, n_customers , vtype=GRB.BINARY ,name ="y")
        gamma = model.addVars(n_facilities, n_outcomes, vtype=GRB.BINARY , name="gamma")

        model.setObjective(quicksum(x[i] * F for i in range(n_facilities)) + quicksum(C[i,j] * y[i,j]
                                                                   for i in range(n_facilities)
                                                                   for j in range(n_customers)) , GRB.MINIMIZE)

        model.addConstrs((y[i,j] <= x[i] for i in range(n_facilities) for j in range(n_customers)), "c1")

        model.addConstrs((quicksum(y[i,j] for i in range(n_facilities)) == 1 for j in range(n_customers)), "c2")

        model.addConstrs((quicksum(xi[j,k]*y[i,j] for j in range(n_customers)) <= M * x[i] + B*(1-gamma[i,k])  for k in range(n_outcomes) for i in range(n_facilities) ), "c3")

        model.addConstrs((quicksum(pi[k]*gamma[i,k] for k in range(n_outcomes)) >= alpha for i in range(n_facilities) )  ,"c4")

        model.optimize()

        if model.status == GRB.OPTIMAL:
            print("Optimal solution:")
            for v in model.getVars():
                print(f"{v.varName}: {v.x}")
            print(f"Objective value: {model.objVal}")
            obj_values.append(model.objVal)

        else:
            print("No optimal solution found.")


        x_results = [{'i': i, 'x[i]': x[i].X, 'cost_combination': config_id-1} for i in range(n_facilities)]

        # Collect y[i, j] values
        y_results = [
            {'cost_combination': config_id-1, 'i': i, 'j': j, 'y[i,j]': y[i, j].X}
            for i in range(n_facilities) for j in range(n_customers)
        ]

        # Convert to DataFrames
        df_x = pd.DataFrame(x_results)
        df_y = pd.DataFrame(y_results)

        sheet_name_x = f"x_values_{config_id-1}"
        sheet_name_y = f"y_values_{config_id-1}"
        # Write dataframes to their respective sheets in the same Excel file
        df_x.to_excel(writer, sheet_name=sheet_name_x, index=False)
        df_y.to_excel(writer, sheet_name=sheet_name_y, index=False)

    df_object = pd.DataFrame(obj_values)
    df_object.to_excel(writer, sheet_name='objectvalue', index=False)
print(f"Combined file saved: {combined_file_name}")
